name: Dev

on:
  push:
  workflow_dispatch:

jobs:
  test:
    uses:
      ./.github/workflows/test.yml

  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
      - uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"
          check-latest: true
      - name: Get version numbers
        id: version
        run: |
          echo "json=$(go run ./tools/version)" >> "$GITHUB_OUTPUT"
      - name: Print version numbers
        run: |
          echo "### Release Info :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${{ fromJSON(steps.version.outputs.json).nextVersion }}" >> $GITHUB_STEP_SUMMARY
          echo "Channel: ${{ fromJSON(steps.version.outputs.json).channel }}" >> $GITHUB_STEP_SUMMARY
          echo "Commit SHA": ${{ github.sha }}
          echo "Commit Time: ${{ fromJSON(steps.version.outputs.json).commitTime }}" >> $GITHUB_STEP_SUMMARY
          echo "GitHub Ref: ${{ fromJSON(steps.version.outputs.json).ref }}" >> $GITHUB_STEP_SUMMARY
          echo "Previous version: ${{ fromJSON(steps.version.outputs.json).previousVersion }}" >> $GITHUB_STEP_SUMMARY
      - name: sanity check old script (stable)
        run: ./scripts/bump_version.sh
      - name: sanity check old script (pre)
        run: ./scripts/bump_version.sh prerel

  tag:
    runs-on: ubuntu-latest
    needs: [version, test]
    steps:
      - name: Create tag
        uses: actions/github-script@v6
        env:
          TAG_NAME: v${{ fromJSON(needs.version.outputs.json).nextVersion }}
        with:
          script: |
            const { TAG_NAME } = process.env
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${TAG_NAME}`,
              sha: context.sha
            })


  build:
    needs: [tag, version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Place wintun.dll
        run: cp -r deps/wintun/bin/amd64/wintun.dll ./
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean -f .goreleaser.2.yml --fail-fast --debug --skip-publish
        env:
          SNAPSHOT_NAME: ${{ needs.version.outputs.version }}
      - name: Write git status
        run: git status --branch --porcelain=v2 > ./dist/git-status.txt
      - uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/*.*
          retention-days: 1
