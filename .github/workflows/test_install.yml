name: Test Installation

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test-docker:
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        image:
          - "ubuntu:20.04"
          - "ubuntu:22.04"
          - "ubuntu:23.04"
          - "debian:oldstable-slim"
          - "debian:stable-slim"
          - "alpine:latest"
          - "archlinux:latest"
          - "amazonlinux:latest"
    runs-on: ubuntu-latest
    env:
      SHELL: /bin/bash
      # FLYCTL_INSTALL: /usr/local/bin
    container:
      image: ${{ matrix.image }}
      options: --user root
    steps:
    - name: Install Dependencies (apt-get)
      if: |
        contains(matrix.image, 'ubuntu') ||
        contains(matrix.image, 'debian')
      run: |
        apt-get update && apt-get install -y curl
    - name: Install Dependencies (apk)
      if: |
        contains(matrix.image, 'alpine')
      run: |
        apk --no-cache add curl
    - name: Install Dependencies (yum)
      if: |
        contains(matrix.image, 'amazonlinux')
      # actions/checkout needs tar & gzip, so install them too
      run: yum install -y --allowerasing tar gzip curl
    - name: checkout
      uses: actions/checkout@v4
    - name: run installer
      run: sh ./installers/install.sh
    - run: |
        echo "$HOME/.fly/bin" >> $GITHUB_PATH
    - run: env
    - name: check that binary is installed
      run: |
        fly version

  test-native:
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        os:
          - "ubuntu-latest"
          - "macos-latest"
          # - "windows-latest"
    runs-on: ${{ matrix.os }}
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: Install (macOS/Linux)
      run: |
        echo "$HOME/.fly/bin" >> $GITHUB_PATH
        sh ./installers/install.sh
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
    - name: Install (Windows)
      shell: powershell
      run: |
        ./installers/install.ps1
        $env:PATH -split ':' | Select-Object -Last 1 | Out-File -FilePath $env:GITHUB_PATH -Append
        env
      if: contains(matrix.os, 'windows')
    - run: env
      shell: powershell
      if: contains(matrix.os, 'windows')
    - run: ls C:\Users\runneradmin\.fly\bin
      shell: powershell
      if: contains(matrix.os, 'windows')
    - run: env
      shell: powershell
      if: contains(matrix.os, 'windows')
    - name: Check that `fly` is in PATH and is executable
      run: flyctl version
      if: ${{ !contains(matrix.os, 'windows') }}
    - name: Check that `fly` is in PATH and is executable
      shell: powershell
      run: flyctl.exe version
      if: contains(matrix.os, 'windows')


  test-windows:
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        os:
          - "windows-latest"
    runs-on: ${{ matrix.os }}
    env:
      FLYCTL_INSTALL: "C:\\flyctl"
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: Install
      shell: powershell
      run: |
        ./installers/install.ps1
    - name: Set Path
      run: |
        echo "${FLYCTL_INSTALL}/.local/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    # - run: env
    #   shell: powershell
    # - run: ls C:\Users\runneradmin\.fly\bin
    #   shell: powershell
    # # - run: env
    # #   shell: powershell
    - name: Check that `fly` is in PATH and is executable
      shell: powershell
      run: flyctl.exe version
